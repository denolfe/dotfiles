// Place your key bindings in this file to override the defaults
[
  // {
  //   "key": "alt+enter",
  //   "command": "editor.action.quickFix",
  //   "when": "editorTextFocus"
  // },
  {
    "key": "cmd+shift+l",
    "command": "editor.action.deleteLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+l",
    "command": "expandLineSelection",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+shift+u",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+i",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+d",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+j",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+k",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+;",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
  },
  {
    "key": "cmd+;",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key": "cmd+\\",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "cmd+shift+\\",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "shift+cmd+=",
    "command": "" // Removes default of zoomIn
  },
  {
    "key": "shift+cmd+-",
    "command": "" // Removes default of zoomOut
  },
  {
    "key": "shift+cmd+=",
    "command": "workbench.action.increaseViewWidth",
    "when": "editorFocus"
  },
  {
    "key": "shift+cmd+=",
    "command": "workbench.action.increaseViewSize",
    "when": "sideBarFocus || panelFocus"
  },
  {
    "key": "shift+cmd+-",
    "command": "workbench.action.decreaseViewWidth",
    "when": "editorFocus"
  },
  {
    "key": "shift+cmd+-",
    "command": "workbench.action.decreaseViewSize",
    "when": "sideBarFocus || panelFocus"
  },
  {
    "key": "cmd+[",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "cmd+]",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "cmd+]",
    "command": "-editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+[",
    "command": "-editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+[",
    "command": "-markdown.extension.onOutdentLines",
    "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
  },
  // Next/Prev change in current file
  {
    "key": "cmd+alt+]",
    "command": "workbench.action.editor.nextChange"
  },
  {
    "key": "cmd+alt+[",
    "command": "workbench.action.editor.previousChange"
  },
  // Next/Prev change in compare editor
  {
    "key": "cmd+alt+]",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "cmd+alt+[",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  // Settings remap
  {
    "key": "cmd+,",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "shift+cmd+,",
    "command": "workbench.action.openSettings"
  },
  {
    "key": "cmd+,",
    "command": "-workbench.action.openSettings"
  },
  // Keybindings
  {
    "key": "alt+cmd+,",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  // Select All Occurrences
  {
    "key": "shift+alt+d",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  // Go to references, definition, type
  {
    "key": "cmd+k cmd+j",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "cmd+k cmd+k",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "cmd+k cmd+l",
    "command": "editor.action.goToTypeDefinition"
  },
  {
    "key": "cmd+k k",
    "command": "editor.action.peekTypeDefinition"
  },
  // {
  //   "key": "cmd+k cmd+h",
  //   "command": "editor.action.goToImplementation",
  //   "when": "editorHasImplementationProvider && editorTextFocus"
  // },
  // Restart TS Server
  {
    "key": "cmd+shift+r",
    "command": "typescript.restartTsServer"
  },
  // Toggle Fold
  {
    "key": "cmd+k l",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  // Go to next error in tab
  {
    "key": "cmd+k cmd+p",
    "command": "editor.action.marker.next",
    "when": "editorFocus"
  },
  // Rename Symbol
  {
    "key": "cmd+r cmd+r",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  // Emmet
  {
    "key": "cmd+m cmd+o",
    "command": "editor.emmet.action.balanceOut"
  },
  {
    "key": "cmd+m cmd+i",
    "command": "editor.emmet.action.balanceIn"
  },
  {
    "key": "cmd+m cmd+m",
    "command": "editor.emmet.action.matchTag"
  },
  {
    "key": "cmd+m cmd+r",
    "command": "editor.emmet.action.updateTag"
  },
  {
    "key": "cmd+m cmd+backspace",
    "command": "editor.emmet.action.removeTag"
  },
  {
    "key": "cmd+m cmd+w",
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },
  // ctrl+tab -> alt+tab
  {
    "key": "alt+p",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "alt+p",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  // Other interface nav
  {
    "key": "cmd+k cmd+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "cmd+k cmd+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "cmd+k cmd+d",
    "command": "workbench.view.debug"
  },
  // Change tabs left/right
  {
    "key": "cmd+shift+[",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "cmd+shift+]",
    "command": "workbench.action.nextEditor"
  },
  // Change tabs in workbench
  {
    "key": "shift+cmd+]",
    "command": "workbench.action.nextPanelView",
    "when": "panelFocus"
  },
  {
    "key": "shift+cmd+[",
    "command": "workbench.action.previousPanelView",
    "when": "panelFocus"
  },
  // New File/Folder when explorer focus
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletFocus"
  },
  {
    "key": "cmd+shift+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  // Explorer open file
  {
    "key": "cmd+enter",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  // Snippets
  {
    "key": "cmd+shift+8",
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "consoleLogObject"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+shift+9",
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "arrow_func_body"
    }
  },
  {
    "key": "tab", // This might cause issues if editing within the peek editor
    "command": "togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  // Group Go To Symbol by default
  {
    "key": "shift+cmd+o",
    "command": "workbench.action.quickOpen",
    "args": "@:"
  },
  {
    "key": "shift+alt+o",
    "command": "workbench.action.gotoSymbol"
  },
  {
    "key": "shift+cmd+o",
    "command": "-workbench.action.gotoSymbol"
  },
  // Jest Runner
  {
    "key": "cmd+k cmd+f",
    "command": "extension.runJestFile"
  },
  // {
  //   "key": "cmd+k cmd+r",
  //   "command": "extension.runPrevJest"
  // },
  // Multi-Command
  {
    "key": "shift+alt+/",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.commentThenDuplicate"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+l",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.deletePairedBrackets"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+b",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.makeSpace"
    }
  },
  {
    "key": "cmd+k cmd+w",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "multiCommand.closeAllTabsExceptCurrent"
    }
  },
  {
    "key": "cmd+k cmd+w",
    "command": "-workbench.action.closeAllEditors"
  },
  // Settings Cycler
  {
    "key": "cmd+shift+0",
    "command": "settings.cycle.screenshare"
  },
  {
    "key": "cmd+k cmd+.",
    "command": "settings.cycle",
    "when": "editorTextFocus && editorLangId =~ /^typescript|^javascript/",
    "args": {
      "id": "ts-toggle-misc-hints",
      "overrideWorkspaceSettings": true,
      "values": [
        {
          "editor.inlayHints.enabled": "off"
        },
        {
          "editor.inlayHints.enabled": "on"
        }
      ]
    }
  },
  {
    "key": "cmd+i",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus && editorLangId != 'markdown'"
  },
  {
    "key": "ctrl+shift+cmd+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus && editorLangId != 'markdown'"
  },
  {
    "key": "cmd+g cmd+d",
    "command": "git.openChange",
    "when": "editorTextFocus"
  },
  // Vitest
  {
    "key": "cmd+k cmd+f",
    "command": "testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+k cmd+r",
    "command": "testing.reRunLastRun",
  },
  // {
  //   "key": "cmd+k cmd+r",
  //   "command": "-workbench.action.keybindingsReference"
  // },
]
