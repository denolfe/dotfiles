#!/usr/bin/env bash
# shellcheck disable=SC2164
# shellcheck disable=SC2162
# shellcheck disable=SC2166
# shellcheck disable=SC1091
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] %s" "$1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] %s " "$1"
}

header()   { printf "\n\033[1;37m%s\033[0m\n" "$@"; }
footer()   { printf "\n  \033[1;37m  %s\033[0m\n" "$@"; }
success()  { printf " \033[1;32m  ✔ \033[0m  %s\n" "$@"; }

fail() {
  printf " \033[1;31m  ✖ \033[0m  %s\n" "$@"
  echo ''
  exit
}
# e_arrow()    { printf " \033[1;34m  ➜ \033[0m  $@\n"; }

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    header 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite=''
  local backup=''
  local skip=''
  local action=''

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc=
      currentSrc="$(readlink "$dst")"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  header 'Installing Dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' | while read dotfile
  do
    dst="$HOME/.$(basename "${dotfile%.*}")"
    link_file "$dotfile" "$dst"
  done
}

setup_gitconfig
install_dotfiles
footer "Dotfiles Installed!"
